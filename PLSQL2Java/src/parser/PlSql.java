/* PlSql.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. PlSql.java */
package parser;

import java.io.Reader;
import java.io.FileInputStream;
import java.util.HashSet;
import java.util.Set;

class PlSql/*@bgen(jjtree)*/implements PlSqlTreeConstants, PlSqlConstants {/*@bgen(jjtree)*/
  protected JJTPlSqlState jjtree = new JJTPlSqlState();
    /** Parse PL/SQL from files.  Each arg is expected to be the name of a file,
        or "-" to indicate System.in.
     */
    public static void main( String args[] ) throws Throwable {
        if (args.length < 1) {
            args = new String[] {"-"};
        }
        for (int a = 0; a < args.length; ++a) {
            final String input = args[a];
            final PlSql parser = new PlSql("-".equals(input) ? System.in : new FileInputStream(input));
            try {
                //parser.CompilationUnit();
                SimpleNode n = parser.CompilationUnit();
                n.dump("");
            } catch(Throwable t) {
                System.err.println(input + ":1: not parsed");
                t.printStackTrace();
            }
            System.out.println(parser.tables.size() + " tables in " + input);
        }
    }

    public Set<String> functions = new HashSet<String>();
    public Set<String> procedures = new HashSet<String>();
    public Set<String> tables = new HashSet<String>();

    public void reInit(Reader input) {
        ReInit(input);
        functions.clear();
        procedures.clear();
        tables.clear();
    }

    private String lastObjectReference = null;

    protected boolean seeTYPE() {
        return "TYPE".equalsIgnoreCase(getToken(1).image);
    }

    protected static final Set<String> ANALYTIC_FUNCTION_NAMES = new HashSet<String>();
    static {
        ANALYTIC_FUNCTION_NAMES.add("AVG");
        ANALYTIC_FUNCTION_NAMES.add("CORR");
        ANALYTIC_FUNCTION_NAMES.add("COVAR_POP");
        ANALYTIC_FUNCTION_NAMES.add("COVAR_SAMP");
        ANALYTIC_FUNCTION_NAMES.add("COUNT");
        ANALYTIC_FUNCTION_NAMES.add("CUME_DIST");
        ANALYTIC_FUNCTION_NAMES.add("DENSE_RANK");
        ANALYTIC_FUNCTION_NAMES.add("FIRST");
        ANALYTIC_FUNCTION_NAMES.add("FIRST_VALUE");
        ANALYTIC_FUNCTION_NAMES.add("LAG");
        ANALYTIC_FUNCTION_NAMES.add("LAST");
        ANALYTIC_FUNCTION_NAMES.add("LAST_VALUE");
        ANALYTIC_FUNCTION_NAMES.add("LEAD");
        ANALYTIC_FUNCTION_NAMES.add("MAX");
        ANALYTIC_FUNCTION_NAMES.add("MIN");
        ANALYTIC_FUNCTION_NAMES.add("NTILE");
        ANALYTIC_FUNCTION_NAMES.add("PERCENT_RANK");
        ANALYTIC_FUNCTION_NAMES.add("PERCENTILE_CONT");
        ANALYTIC_FUNCTION_NAMES.add("PERCENTILE_DISC");
        ANALYTIC_FUNCTION_NAMES.add("RANK");
        ANALYTIC_FUNCTION_NAMES.add("RATIO_TO_REPORT");
        ANALYTIC_FUNCTION_NAMES.add("REGR_SLOPE");
        ANALYTIC_FUNCTION_NAMES.add("REGR_INTERCEPT");
        ANALYTIC_FUNCTION_NAMES.add("REGR_COUNT");
        ANALYTIC_FUNCTION_NAMES.add("REGR_R2");
        ANALYTIC_FUNCTION_NAMES.add("REGR_AVGX");
        ANALYTIC_FUNCTION_NAMES.add("REGR_AVGY");
        ANALYTIC_FUNCTION_NAMES.add("REGR_SXX");
        ANALYTIC_FUNCTION_NAMES.add("REGR_SYY");
        ANALYTIC_FUNCTION_NAMES.add("REGR_SXY");
        ANALYTIC_FUNCTION_NAMES.add("ROW_NUMBER");
        ANALYTIC_FUNCTION_NAMES.add("STDDEV");
        ANALYTIC_FUNCTION_NAMES.add("STDDEV_POP");
        ANALYTIC_FUNCTION_NAMES.add("STDDEV_SAMP");
        ANALYTIC_FUNCTION_NAMES.add("SUM");
        ANALYTIC_FUNCTION_NAMES.add("VAR_POP");
        ANALYTIC_FUNCTION_NAMES.add("VAR_SAMP");
        ANALYTIC_FUNCTION_NAMES.add("VARIANCE");
    }

    protected boolean seeAnalyticFunction() {
        return "(".equals(getToken(2).image)
            && ANALYTIC_FUNCTION_NAMES.contains(getToken(1).image.toUpperCase());
    }

/* Represents a PLSQL code block. */
  final public SimpleNode CompilationUnit() throws ParseException {/*@bgen(jjtree) CompilationUnit */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_PROCEDURE:{
        ProcedureDeclaration();
        break;
        }
      case K_FUNCTION:{
        FunctionDeclaration();
        break;
        }
      case K_BEGIN:
      case K_CLOSE:
      case K_COMMIT:
      case K_DECLARE:
      case K_DELETE:
      case K_EXIT:
      case K_FETCH:
      case K_FOR:
      case K_FORALL:
      case K_GOTO:
      case K_IF:
      case K_INSERT:
      case K_LOCK:
      case K_LOOP:
      case K_MERGE:
      case K_NULL:
      case K_OPEN:
      case K_RAISE:
      case K_RETURN:
      case K_ROLLBACK:
      case K_SAVEPOINT:
      case K_SELECT:
      case K_SET:
      case K_UPDATE:
      case K_WHILE:
      case S_IDENTIFIER:
      case S_BIND:
      case S_QUOTED_IDENTIFIER:
      case 150:
      case 154:
      case 160:{
        SequenceOfStatements();
        break;
        }
      case K_ALTER:{
        AlterSession();
        break;
        }
      case K_CALL:{
        jj_consume_token(K_CALL);
        ProcedureCall();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    return jjtn000;
  }

  final public void BindVariable() throws ParseException {/*@bgen(jjtree) BindVariable */
  SimpleNode jjtn000 = new SimpleNode(JJTBINDVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_BIND:{
        jj_consume_token(S_BIND);
        break;
        }
      case 150:{
        jj_consume_token(150);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_NUMBER:{
          jj_consume_token(S_NUMBER);
          break;
          }
        case S_IDENTIFIER:{
          jj_consume_token(S_IDENTIFIER);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 151:{
            jj_consume_token(151);
            jj_consume_token(S_IDENTIFIER);
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AlterSession() throws ParseException {/*@bgen(jjtree) AlterSession */
  SimpleNode jjtn000 = new SimpleNode(JJTALTERSESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_ALTER);
      ID("SESSION");
      jj_consume_token(K_SET);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
        jj_consume_token(S_IDENTIFIER);
        jj_consume_token(152);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_CHAR_LITERAL:{
          jj_consume_token(S_CHAR_LITERAL);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          if (getToken(1).image.matches("(?i)TRUE|FALSE")) {
            jj_consume_token(S_IDENTIFIER);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_COMMENT:{
        jj_consume_token(K_COMMENT);
        jj_consume_token(152);
        jj_consume_token(S_CHAR_LITERAL);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DeclarationSection() throws ParseException {/*@bgen(jjtree) DeclarationSection */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATIONSECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DECLARE);
      Declarations();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Declarations() throws ParseException {/*@bgen(jjtree) Declarations */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        if (seeTYPE()) {
          ID("TYPE");
          jj_consume_token(S_IDENTIFIER);
          jj_consume_token(K_IS);
          TypeDefinition();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_CURSOR:{
            CursorDeclaration();
            break;
            }
          case K_PRAGMA:{
            PragmaDeclaration();
            break;
            }
          case S_IDENTIFIER:{
            IdentifierDeclaration();
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(153);
        if (jj_2_1(1)) {
          ;
        } else {
          break label_2;
        }
      }
      label_3:
      while (true) {
        if (jj_2_2(1)) {
          ;
        } else {
          break label_3;
        }
        if (!seeTYPE()) {
          ProcedureDeclaration();
        } else if (!seeTYPE()) {
          FunctionDeclaration();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void IdentifierDeclaration() throws ParseException {/*@bgen(jjtree) IdentifierDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_CONSTANT:{
        ConstantDeclaration();
        break;
        }
      case K_BINARY_INTEGER:
      case K_BOOLEAN:
      case K_CHAR:
      case K_DATE:
      case K_FLOAT:
      case K_INTEGER:
      case K_NATURAL:
      case K_NUMBER:
      case K_REAL:
      case K_TABLE:
      case K_VARCHAR2:
      case K_VARCHAR:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        VariableDeclaration();
        break;
        }
      case K_EXCEPTION:{
        ExceptionDeclaration();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void CursorDeclaration() throws ParseException {/*@bgen(jjtree) CursorDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTCURSORDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CURSOR);
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 154:{
        jj_consume_token(154);
        ParameterList();
        jj_consume_token(155);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(K_IS);
      SelectStatement();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void PragmaDeclaration() throws ParseException {/*@bgen(jjtree) PragmaDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTPRAGMADECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_PRAGMA);
      jj_consume_token(K_EXCEPTION_INIT);
      jj_consume_token(154);
      NumOrID();
      jj_consume_token(156);
      NumOrID();
      jj_consume_token(155);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ProcedureDeclaration() throws ParseException {/*@bgen(jjtree) ProcedureDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTPROCEDUREDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_PROCEDURE);
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 154:{
        jj_consume_token(154);
        ParameterList();
        jj_consume_token(155);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 153:{
        jj_consume_token(153);
        break;
        }
      case K_IS:{
        jj_consume_token(K_IS);
        ProcedureBody();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ProcedureBody() throws ParseException {/*@bgen(jjtree) ProcedureBody */
  SimpleNode jjtn000 = new SimpleNode(JJTPROCEDUREBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_3(1)) {
        Declarations();
      } else {
        ;
      }
      BeginEndBlock();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void FunctionDeclaration() throws ParseException {/*@bgen(jjtree) FunctionDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FUNCTION);
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 154:{
        jj_consume_token(154);
        ParameterList();
        jj_consume_token(155);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(K_RETURN);
      TypeDefinition();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 153:{
        jj_consume_token(153);
        break;
        }
      case K_IS:{
        jj_consume_token(K_IS);
        FunctionBody();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void FunctionBody() throws ParseException {/*@bgen(jjtree) FunctionBody */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_4(1)) {
        Declarations();
      } else {
        ;
      }
      BeginEndBlock();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void VariableDeclaration() throws ParseException {/*@bgen(jjtree) VariableDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TypeDefinition();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        jj_consume_token(K_NULL);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_DEFAULT:
      case 157:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 157:{
          jj_consume_token(157);
          break;
          }
        case K_DEFAULT:{
          jj_consume_token(K_DEFAULT);
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PlSqlExpression();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ConstantDeclaration() throws ParseException {/*@bgen(jjtree) ConstantDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTANTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CONSTANT);
      TypeDefinition();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        jj_consume_token(K_NULL);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 157:{
        jj_consume_token(157);
        break;
        }
      case K_DEFAULT:{
        jj_consume_token(K_DEFAULT);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      PlSqlExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TypeDefinition() throws ParseException {/*@bgen(jjtree) TypeDefinition */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_BINARY_INTEGER:
      case K_BOOLEAN:
      case K_CHAR:
      case K_DATE:
      case K_FLOAT:
      case K_INTEGER:
      case K_NATURAL:
      case K_NUMBER:
      case K_REAL:
      case K_VARCHAR2:
      case K_VARCHAR:{
        BasicDataTypeDefinition();
        break;
        }
      case K_TABLE:{
        jj_consume_token(K_TABLE);
        jj_consume_token(K_OF);
        TypeDefinition();
        if (jj_2_5(2)) {
          jj_consume_token(K_INDEX);
          jj_consume_token(K_BY);
          BasicDataTypeDefinition();
        } else {
          ;
        }
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        if (jj_2_6(2)) {
          jj_consume_token(S_IDENTIFIER);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 158:{
            jj_consume_token(158);
            break;
            }
          case 159:{
            jj_consume_token(159);
            break;
            }
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else if (jj_2_7(2147483647)) {
          TableColumn();
          jj_consume_token(158);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S_IDENTIFIER:{
            jj_consume_token(S_IDENTIFIER);
            break;
            }
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void BasicDataTypeDefinition() throws ParseException {/*@bgen(jjtree) BasicDataTypeDefinition */
  SimpleNode jjtn000 = new SimpleNode(JJTBASICDATATYPEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_CHAR:
      case K_FLOAT:
      case K_INTEGER:
      case K_NATURAL:
      case K_NUMBER:
      case K_REAL:
      case K_VARCHAR2:
      case K_VARCHAR:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_CHAR:{
          jj_consume_token(K_CHAR);
          break;
          }
        case K_VARCHAR:{
          jj_consume_token(K_VARCHAR);
          break;
          }
        case K_VARCHAR2:{
          jj_consume_token(K_VARCHAR2);
          break;
          }
        case K_INTEGER:{
          jj_consume_token(K_INTEGER);
          break;
          }
        case K_NUMBER:{
          jj_consume_token(K_NUMBER);
          break;
          }
        case K_NATURAL:{
          jj_consume_token(K_NATURAL);
          break;
          }
        case K_REAL:{
          jj_consume_token(K_REAL);
          break;
          }
        case K_FLOAT:{
          jj_consume_token(K_FLOAT);
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 154:{
          jj_consume_token(154);
          jj_consume_token(S_NUMBER);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 156:{
            jj_consume_token(156);
            jj_consume_token(S_NUMBER);
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            ;
          }
          jj_consume_token(155);
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        break;
        }
      case K_DATE:{
        jj_consume_token(K_DATE);
        break;
        }
      case K_BINARY_INTEGER:{
        jj_consume_token(K_BINARY_INTEGER);
        break;
        }
      case K_BOOLEAN:{
        jj_consume_token(K_BOOLEAN);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ExceptionDeclaration() throws ParseException {/*@bgen(jjtree) ExceptionDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTEXCEPTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_EXCEPTION);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* ---------------- DECLARATIONS SECTION ends here ------------------ */

/* ---------------- Code Section starts here ---------------------- */
  final public 
void BeginEndBlock() throws ParseException {/*@bgen(jjtree) BeginEndBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTBEGINENDBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_BEGIN);
      SequenceOfStatements();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_EXCEPTION:{
        ExceptionBlock();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      jj_consume_token(K_END);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(153);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SequenceOfStatements() throws ParseException {/*@bgen(jjtree) SequenceOfStatements */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQUENCEOFSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        PLSQLStatement();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_BEGIN:
        case K_CLOSE:
        case K_COMMIT:
        case K_DECLARE:
        case K_DELETE:
        case K_EXIT:
        case K_FETCH:
        case K_FOR:
        case K_FORALL:
        case K_GOTO:
        case K_IF:
        case K_INSERT:
        case K_LOCK:
        case K_LOOP:
        case K_MERGE:
        case K_NULL:
        case K_OPEN:
        case K_RAISE:
        case K_RETURN:
        case K_ROLLBACK:
        case K_SAVEPOINT:
        case K_SELECT:
        case K_SET:
        case K_UPDATE:
        case K_WHILE:
        case S_IDENTIFIER:
        case S_BIND:
        case S_QUOTED_IDENTIFIER:
        case 150:
        case 154:
        case 160:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_4;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ExceptionBlock() throws ParseException {/*@bgen(jjtree) ExceptionBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTEXCEPTIONBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_EXCEPTION);
      label_5:
      while (true) {
        ExceptionHandler();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_WHEN:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_5;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ExceptionHandler() throws ParseException {/*@bgen(jjtree) ExceptionHandler */
  SimpleNode jjtn000 = new SimpleNode(JJTEXCEPTIONHANDLER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_WHEN);
      jj_consume_token(S_IDENTIFIER);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_OR:{
          ;
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          break label_6;
        }
        jj_consume_token(K_OR);
        jj_consume_token(S_IDENTIFIER);
      }
      jj_consume_token(K_THEN);
      SequenceOfStatements();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PLSQLStatement() throws ParseException {/*@bgen(jjtree) PLSQLStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTPLSQLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_EXIT:{
        ExitStatement();
        break;
        }
      case K_GOTO:{
        GotoStatement();
        break;
        }
      case K_IF:{
        IfStatement();
        break;
        }
      case 160:{
        LabelDeclaration();
        break;
        }
      case K_FOR:
      case K_LOOP:
      case K_WHILE:{
        LoopStatement();
        break;
        }
      case K_NULL:{
        NullStatement();
        break;
        }
      case K_RAISE:{
        RaiseStatement();
        break;
        }
      case K_RETURN:{
        ReturnStatement();
        break;
        }
      case K_FORALL:{
        ForallStatement();
        break;
        }
      case K_CLOSE:
      case K_COMMIT:
      case K_DELETE:
      case K_FETCH:
      case K_INSERT:
      case K_LOCK:
      case K_MERGE:
      case K_OPEN:
      case K_ROLLBACK:
      case K_SAVEPOINT:
      case K_SELECT:
      case K_SET:
      case K_UPDATE:
      case 154:{
        SQLStatement();
        break;
        }
      case K_BEGIN:
      case K_DECLARE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_DECLARE:{
          DeclarationSection();
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          ;
        }
        BeginEndBlock();
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        if (jj_2_8(2147483647)) {
          AssignmentStatement();
        } else if (jj_2_9(2147483647)) {
          ProcedureCall();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LabelDeclaration() throws ParseException {/*@bgen(jjtree) LabelDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTLABELDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(160);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(161);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ForallStatement() throws ParseException {/*@bgen(jjtree) ForallStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFORALLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FORALL);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(K_IN);
      PlSqlSimpleExpression();
      jj_consume_token(162);
      PlSqlSimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_INSERT:{
        InsertStatement();
        break;
        }
      case K_UPDATE:{
        UpdateStatement();
        break;
        }
      case K_DELETE:{
        DeleteStatement();
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SQLStatement() throws ParseException {/*@bgen(jjtree) SQLStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_CLOSE:{
        CloseStatement();
        break;
        }
      case K_COMMIT:{
        CommitStatement();
        break;
        }
      case K_DELETE:{
        DeleteStatement();
        break;
        }
      case K_FETCH:{
        FetchStatement();
        break;
        }
      case K_INSERT:{
        InsertStatement();
        break;
        }
      case K_LOCK:{
        LockTableStatement();
        break;
        }
      case K_OPEN:{
        OpenStatement();
        break;
        }
      case K_ROLLBACK:{
        RollbackStatement();
        break;
        }
      case K_SAVEPOINT:{
        SavepointStatement();
        break;
        }
      case K_SELECT:
      case 154:{
        QueryStatement();
        break;
        }
      case K_SET:{
        SetStatement();
        break;
        }
      case K_UPDATE:{
        UpdateStatement();
        break;
        }
      case K_MERGE:{
        MergeStatement();
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ProcedureCall() throws ParseException {/*@bgen(jjtree) ProcedureCall */
  SimpleNode jjtn000 = new SimpleNode(JJTPROCEDURECALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ProcedureReference();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 154:{
        jj_consume_token(154);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_CASE:
        case K_CAST:
        case K_NOT:
        case K_NULL:
        case K_SQL:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 150:
        case 154:
        case 163:
        case 164:{
          Arguments();
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          ;
        }
        jj_consume_token(155);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(153);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ProcedureReference() throws ParseException {/*@bgen(jjtree) ProcedureReference */
    SimpleNode jjtn000 = new SimpleNode(JJTPROCEDUREREFERENCE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String name;
    try {
      name = ObjectReference();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
procedures.add(name.toUpperCase());
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AssignmentStatement() throws ParseException {/*@bgen(jjtree) AssignmentStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DataItem();
      jj_consume_token(157);
      PlSqlExpression();
      jj_consume_token(153);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ExitStatement() throws ParseException {/*@bgen(jjtree) ExitStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTEXITSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_EXIT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_WHEN:{
        jj_consume_token(K_WHEN);
        PlSqlExpression();
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      jj_consume_token(153);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void GotoStatement() throws ParseException {/*@bgen(jjtree) GotoStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTGOTOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_GOTO);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(153);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void IfStatement() throws ParseException {/*@bgen(jjtree) IfStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_IF);
      PlSqlExpression();
      jj_consume_token(K_THEN);
      SequenceOfStatements();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_ELSIF:{
          ;
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          break label_7;
        }
        jj_consume_token(K_ELSIF);
        PlSqlExpression();
        jj_consume_token(K_THEN);
        SequenceOfStatements();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ELSE:{
        jj_consume_token(K_ELSE);
        SequenceOfStatements();
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      jj_consume_token(K_END);
      jj_consume_token(K_IF);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      jj_consume_token(153);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LoopStatement() throws ParseException {/*@bgen(jjtree) LoopStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_LOOP:{
        NormalLoop();
        break;
        }
      case K_WHILE:{
        WhileLoop();
        break;
        }
      case K_FOR:{
        ForLoop();
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NormalLoop() throws ParseException {/*@bgen(jjtree) NormalLoop */
  SimpleNode jjtn000 = new SimpleNode(JJTNORMALLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_LOOP);
      SequenceOfStatements();
      jj_consume_token(K_END);
      jj_consume_token(K_LOOP);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      jj_consume_token(153);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void WhileLoop() throws ParseException {/*@bgen(jjtree) WhileLoop */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_WHILE);
      PlSqlExpression();
      NormalLoop();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ForLoop() throws ParseException {/*@bgen(jjtree) ForLoop */
  SimpleNode jjtn000 = new SimpleNode(JJTFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_10(2147483647)) {
        NumericForLoop();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_FOR:{
          CursorForLoop();
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NumericForLoopLookahead() throws ParseException {/*@bgen(jjtree) NumericForLoopLookahead */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMERICFORLOOPLOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FOR);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(K_IN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_REVERSE:{
        jj_consume_token(K_REVERSE);
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      PlSqlSimpleExpression();
      jj_consume_token(162);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NumericForLoop() throws ParseException {/*@bgen(jjtree) NumericForLoop */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMERICFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FOR);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(K_IN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_REVERSE:{
        jj_consume_token(K_REVERSE);
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      PlSqlSimpleExpression();
      jj_consume_token(162);
      PlSqlSimpleExpression();
      NormalLoop();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void CursorForLoop() throws ParseException {/*@bgen(jjtree) CursorForLoop */
  SimpleNode jjtn000 = new SimpleNode(JJTCURSORFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FOR);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(K_IN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        CursorReference();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 154:{
          jj_consume_token(154);
          Arguments();
          jj_consume_token(155);
          break;
          }
        default:
          jj_la1[47] = jj_gen;
          ;
        }
        break;
        }
      case 154:{
        jj_consume_token(154);
        SelectStatement();
        jj_consume_token(155);
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      NormalLoop();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CursorReference() throws ParseException {/*@bgen(jjtree) CursorReference */
  SimpleNode jjtn000 = new SimpleNode(JJTCURSORREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ObjectReference();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NullStatement() throws ParseException {/*@bgen(jjtree) NullStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTNULLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_NULL);
      jj_consume_token(153);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RaiseStatement() throws ParseException {/*@bgen(jjtree) RaiseStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTRAISESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_RAISE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      jj_consume_token(153);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ReturnStatement() throws ParseException {/*@bgen(jjtree) ReturnStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_RETURN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_CASE:
      case K_CAST:
      case K_NOT:
      case K_NULL:
      case K_SQL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 150:
      case 154:
      case 163:
      case 164:{
        PlSqlExpression();
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      jj_consume_token(153);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void CloseStatement() throws ParseException {/*@bgen(jjtree) CloseStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCLOSESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CLOSE);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(153);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void CommitStatement() throws ParseException {/*@bgen(jjtree) CommitStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMMITSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_COMMIT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_WORK:{
        jj_consume_token(K_WORK);
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_COMMENT:{
        jj_consume_token(K_COMMENT);
        jj_consume_token(S_CHAR_LITERAL);
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      jj_consume_token(153);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void FetchStatement() throws ParseException {/*@bgen(jjtree) FetchStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFETCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FETCH);
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_INTO:{
        jj_consume_token(K_INTO);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_IDENTIFIER:{
          jj_consume_token(S_IDENTIFIER);
          break;
          }
        case S_BIND:
        case 150:{
          BindVariable();
          break;
          }
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 156:{
            ;
            break;
            }
          default:
            jj_la1[54] = jj_gen;
            break label_8;
          }
          jj_consume_token(156);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S_IDENTIFIER:{
            jj_consume_token(S_IDENTIFIER);
            break;
            }
          case S_BIND:
          case 150:{
            BindVariable();
            break;
            }
          default:
            jj_la1[55] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        if (jj_2_12(3)) {
          ID("BULK");
          ID("COLLECT");
          jj_consume_token(K_INTO);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S_IDENTIFIER:{
            jj_consume_token(S_IDENTIFIER);
            break;
            }
          case 150:{
            jj_consume_token(150);
            jj_consume_token(S_IDENTIFIER);
            break;
            }
          default:
            jj_la1[56] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_9:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 156:{
              ;
              break;
              }
            default:
              jj_la1[57] = jj_gen;
              break label_9;
            }
            jj_consume_token(156);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S_IDENTIFIER:{
              jj_consume_token(S_IDENTIFIER);
              break;
              }
            case 150:{
              jj_consume_token(150);
              jj_consume_token(S_IDENTIFIER);
              break;
              }
            default:
              jj_la1[58] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          if (jj_2_11(2)) {
            ID("LIMIT");
            PlSqlSimpleExpression();
          } else {
            ;
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(153);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LockTableStatement() throws ParseException {/*@bgen(jjtree) LockTableStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTLOCKTABLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_LOCK);
      jj_consume_token(K_TABLE);
      TableName();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 156:{
          ;
          break;
          }
        default:
          jj_la1[60] = jj_gen;
          break label_10;
        }
        jj_consume_token(156);
        TableName();
      }
      jj_consume_token(K_IN);
      LockMode();
      ID("MODE");
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOWAIT:{
        jj_consume_token(K_NOWAIT);
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      jj_consume_token(153);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void OpenStatement() throws ParseException {/*@bgen(jjtree) OpenStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTOPENSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_OPEN);
      CursorReference();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 154:{
        jj_consume_token(154);
        Arguments();
        jj_consume_token(155);
        break;
        }
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      jj_consume_token(153);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RollbackStatement() throws ParseException {/*@bgen(jjtree) RollbackStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTROLLBACKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_ROLLBACK);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_WORK:{
        jj_consume_token(K_WORK);
        break;
        }
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_TO:{
        jj_consume_token(K_TO);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_SAVEPOINT:{
          jj_consume_token(K_SAVEPOINT);
          break;
          }
        default:
          jj_la1[64] = jj_gen;
          ;
        }
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[65] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_COMMENT:{
        jj_consume_token(K_COMMENT);
        jj_consume_token(S_CHAR_LITERAL);
        break;
        }
      default:
        jj_la1[66] = jj_gen;
        ;
      }
      jj_consume_token(153);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SetStatement() throws ParseException {/*@bgen(jjtree) SetStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSETSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SET);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_TRANSACTION:{
        jj_consume_token(K_TRANSACTION);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_READ:{
          jj_consume_token(K_READ);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_ONLY:{
            jj_consume_token(K_ONLY);
            break;
            }
          case K_WRITE:{
            jj_consume_token(K_WRITE);
            break;
            }
          default:
            jj_la1[67] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        case K_ISOLATION:{
          jj_consume_token(K_ISOLATION);
          ID("LEVEL");
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_SERIALIZABLE:{
            jj_consume_token(K_SERIALIZABLE);
            break;
            }
          case K_READ:{
            jj_consume_token(K_READ);
            ID("COMMITTED");
            break;
            }
          default:
            jj_la1[68] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        case K_USE:{
          jj_consume_token(K_USE);
          jj_consume_token(K_ROLLBACK);
          ID("SEGMENT");
          ObjectReference();
          break;
          }
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case K_CONSTRAINT:
      case K_CONSTRAINTS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_CONSTRAINT:{
          jj_consume_token(K_CONSTRAINT);
          break;
          }
        case K_CONSTRAINTS:{
          jj_consume_token(K_CONSTRAINTS);
          break;
          }
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_ALL:{
          jj_consume_token(K_ALL);
          break;
          }
        case S_IDENTIFIER:{
          jj_consume_token(S_IDENTIFIER);
          label_11:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 156:{
              ;
              break;
              }
            default:
              jj_la1[71] = jj_gen;
              break label_11;
            }
            jj_consume_token(156);
            jj_consume_token(S_IDENTIFIER);
          }
          break;
          }
        default:
          jj_la1[72] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (getToken(1).image.matches("(?i)IMMEDIATE|DEFERRED")) {
          jj_consume_token(S_IDENTIFIER);
        } else {
          ;
        }
        break;
        }
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(153);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LockMode() throws ParseException {/*@bgen(jjtree) LockMode */
  SimpleNode jjtn000 = new SimpleNode(JJTLOCKMODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ROW:{
        jj_consume_token(K_ROW);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_SHARE:{
          jj_consume_token(K_SHARE);
          break;
          }
        case K_EXCLUSIVE:{
          jj_consume_token(K_EXCLUSIVE);
          break;
          }
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case K_SHARE:{
        jj_consume_token(K_SHARE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_ROW:
        case K_UPDATE:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_UPDATE:{
            jj_consume_token(K_UPDATE);
            break;
            }
          case K_ROW:{
            jj_consume_token(K_ROW);
            jj_consume_token(K_EXCLUSIVE);
            break;
            }
          default:
            jj_la1[75] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[76] = jj_gen;
          ;
        }
        break;
        }
      case K_EXCLUSIVE:{
        jj_consume_token(K_EXCLUSIVE);
        break;
        }
      default:
        jj_la1[77] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SavepointStatement() throws ParseException {/*@bgen(jjtree) SavepointStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSAVEPOINTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SAVEPOINT);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(153);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void UpdateStatement() throws ParseException {/*@bgen(jjtree) UpdateStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTUPDATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_UPDATE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        TableName();
        break;
        }
      case 154:{
        jj_consume_token(154);
        SubQuery();
        jj_consume_token(155);
        break;
        }
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        OracleObjectName();
        break;
        }
      default:
        jj_la1[79] = jj_gen;
        ;
      }
      jj_consume_token(K_SET);
      ColumnValues();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_WHERE:{
        jj_consume_token(K_WHERE);
        if (jj_2_13(1)) {
          SQLExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_CURRENT:{
            jj_consume_token(K_CURRENT);
            jj_consume_token(K_OF);
            jj_consume_token(S_IDENTIFIER);
            break;
            }
          default:
            jj_la1[80] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[81] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_RETURNING:{
        ReturningClause();
        break;
        }
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      jj_consume_token(153);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ReturningClause() throws ParseException {/*@bgen(jjtree) ReturningClause */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURNINGCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_RETURNING);
      SQLExpression();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 156:{
          ;
          break;
          }
        default:
          jj_la1[83] = jj_gen;
          break label_12;
        }
        jj_consume_token(156);
        SQLExpression();
      }
      IntoClause();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ColumnValues() throws ParseException {/*@bgen(jjtree) ColumnValues */
  SimpleNode jjtn000 = new SimpleNode(JJTCOLUMNVALUES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        ColumnValue();
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 156:{
            ;
            break;
            }
          default:
            jj_la1[84] = jj_gen;
            break label_13;
          }
          jj_consume_token(156);
          ColumnValue();
        }
        break;
        }
      case 154:{
        jj_consume_token(154);
        TableColumn();
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 156:{
            ;
            break;
            }
          default:
            jj_la1[85] = jj_gen;
            break label_14;
          }
          jj_consume_token(156);
          TableColumn();
        }
        jj_consume_token(155);
        jj_consume_token(152);
        jj_consume_token(154);
        SelectStatement();
        jj_consume_token(155);
        break;
        }
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ColumnValue() throws ParseException {/*@bgen(jjtree) ColumnValue */
  SimpleNode jjtn000 = new SimpleNode(JJTCOLUMNVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TableColumn();
      jj_consume_token(152);
      PlSqlExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void InsertStatement() throws ParseException {/*@bgen(jjtree) InsertStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTINSERTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_INSERT);
      jj_consume_token(K_INTO);
      TableName();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        OracleObjectName();
        break;
        }
      default:
        jj_la1[87] = jj_gen;
        ;
      }
      if (jj_2_14(2)) {
        jj_consume_token(154);
        TableColumn();
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 156:{
            ;
            break;
            }
          default:
            jj_la1[88] = jj_gen;
            break label_15;
          }
          jj_consume_token(156);
          TableColumn();
        }
        jj_consume_token(155);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_VALUES:{
        jj_consume_token(K_VALUES);
        jj_consume_token(154);
        PlSqlExpressionList();
        jj_consume_token(155);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_RETURNING:{
          ReturningClause();
          break;
          }
        default:
          jj_la1[89] = jj_gen;
          ;
        }
        break;
        }
      case K_SELECT:
      case 154:{
        SubQuery();
        break;
        }
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(153);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MergeStatement() throws ParseException {/*@bgen(jjtree) MergeStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTMERGESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_MERGE);
      jj_consume_token(K_INTO);
      TableReference();
      jj_consume_token(K_USING);
      TableReference();
      jj_consume_token(K_ON);
      jj_consume_token(154);
      SQLExpression();
      jj_consume_token(155);
      jj_consume_token(K_WHEN);
      ID("MATCHED");
      jj_consume_token(K_THEN);
      jj_consume_token(K_UPDATE);
      jj_consume_token(K_SET);
      MergeSetColumn();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 156:{
          ;
          break;
          }
        default:
          jj_la1[91] = jj_gen;
          break label_16;
        }
        jj_consume_token(156);
        MergeSetColumn();
      }
      jj_consume_token(K_WHEN);
      jj_consume_token(K_NOT);
      ID("MATCHED");
      jj_consume_token(K_THEN);
      jj_consume_token(K_INSERT);
      jj_consume_token(154);
      TableColumn();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 156:{
          ;
          break;
          }
        default:
          jj_la1[92] = jj_gen;
          break label_17;
        }
        jj_consume_token(156);
        TableColumn();
      }
      jj_consume_token(155);
      jj_consume_token(K_VALUES);
      jj_consume_token(154);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_DEFAULT:{
        jj_consume_token(K_DEFAULT);
        break;
        }
      default:
        jj_la1[93] = jj_gen;
        if (jj_2_15(1)) {
          SQLExpressionList();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(155);
      jj_consume_token(153);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MergeSetColumn() throws ParseException {/*@bgen(jjtree) MergeSetColumn */
  SimpleNode jjtn000 = new SimpleNode(JJTMERGESETCOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TableColumn();
      jj_consume_token(152);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_DEFAULT:{
        jj_consume_token(K_DEFAULT);
        break;
        }
      default:
        jj_la1[94] = jj_gen;
        if (jj_2_16(1)) {
          SQLExpression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DeleteStatement() throws ParseException {/*@bgen(jjtree) DeleteStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDELETESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DELETE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_FROM:{
        jj_consume_token(K_FROM);
        break;
        }
      default:
        jj_la1[95] = jj_gen;
        ;
      }
      TableName();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        OracleObjectName();
        break;
        }
      default:
        jj_la1[96] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_WHERE:{
        jj_consume_token(K_WHERE);
        if (jj_2_17(1)) {
          SQLExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_CURRENT:{
            jj_consume_token(K_CURRENT);
            jj_consume_token(K_OF);
            jj_consume_token(S_IDENTIFIER);
            break;
            }
          default:
            jj_la1[97] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[98] = jj_gen;
        ;
      }
      jj_consume_token(153);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void QueryStatement() throws ParseException {/*@bgen(jjtree) QueryStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTQUERYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SelectStatement();
      jj_consume_token(153);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// PLSQL Expression and it's children
  final public 
void PlSqlExpression() throws ParseException {/*@bgen(jjtree) PlSqlExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPLSQLEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PlSqlAndExpression();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_OR:{
          ;
          break;
          }
        default:
          jj_la1[99] = jj_gen;
          break label_18;
        }
        jj_consume_token(K_OR);
        PlSqlAndExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PlSqlAndExpression() throws ParseException {/*@bgen(jjtree) PlSqlAndExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPLSQLANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PlSqlUnaryLogicalExpression();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_AND:{
          ;
          break;
          }
        default:
          jj_la1[100] = jj_gen;
          break label_19;
        }
        jj_consume_token(K_AND);
        PlSqlUnaryLogicalExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PlSqlUnaryLogicalExpression() throws ParseException {/*@bgen(jjtree) PlSqlUnaryLogicalExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPLSQLUNARYLOGICALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[101] = jj_gen;
        ;
      }
      PlSqlRelationalExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PlSqlRelationalExpression() throws ParseException {/*@bgen(jjtree) PlSqlRelationalExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPLSQLRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PlSqlSimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_BETWEEN:
      case K_IN:
      case K_IS:
      case K_LIKE:
      case K_NOT:
      case 152:
      case 170:
      case 171:
      case 172:
      case 173:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 152:
        case 170:
        case 171:
        case 172:
        case 173:{
          Relop();
          PlSqlSimpleExpression();
          break;
          }
        default:
          jj_la1[102] = jj_gen;
          if (jj_2_18(2)) {
            PlSqlInClause();
          } else if (jj_2_19(2)) {
            PlSqlBetweenClause();
          } else if (jj_2_20(2)) {
            PlSqlLikeClause();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case K_IS:{
              IsNullClause();
              break;
              }
            default:
              jj_la1[103] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
        }
      default:
        jj_la1[104] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PlSqlExpressionList() throws ParseException {/*@bgen(jjtree) PlSqlExpressionList */
  SimpleNode jjtn000 = new SimpleNode(JJTPLSQLEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PlSqlExpression();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 156:{
          ;
          break;
          }
        default:
          jj_la1[105] = jj_gen;
          break label_20;
        }
        jj_consume_token(156);
        PlSqlExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PlSqlInClause() throws ParseException {/*@bgen(jjtree) PlSqlInClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPLSQLINCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[106] = jj_gen;
        ;
      }
      jj_consume_token(K_IN);
      jj_consume_token(154);
      PlSqlExpressionList();
      jj_consume_token(155);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PlSqlBetweenClause() throws ParseException {/*@bgen(jjtree) PlSqlBetweenClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPLSQLBETWEENCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[107] = jj_gen;
        ;
      }
      jj_consume_token(K_BETWEEN);
      PlSqlSimpleExpression();
      jj_consume_token(K_AND);
      PlSqlSimpleExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PlSqlLikeClause() throws ParseException {/*@bgen(jjtree) PlSqlLikeClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPLSQLLIKECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[108] = jj_gen;
        ;
      }
      jj_consume_token(K_LIKE);
      PlSqlSimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ESCAPE:{
        jj_consume_token(K_ESCAPE);
        PlSqlSimpleExpression();
        break;
        }
      default:
        jj_la1[109] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void IsNullClause() throws ParseException {/*@bgen(jjtree) IsNullClause */
  SimpleNode jjtn000 = new SimpleNode(JJTISNULLCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_IS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[110] = jj_gen;
        ;
      }
      jj_consume_token(K_NULL);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PlSqlSimpleExpression() throws ParseException {/*@bgen(jjtree) PlSqlSimpleExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPLSQLSIMPLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PlSqlMultiplicativeExpression();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 163:
        case 164:
        case 165:{
          ;
          break;
          }
        default:
          jj_la1[111] = jj_gen;
          break label_21;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 163:{
          jj_consume_token(163);
          break;
          }
        case 164:{
          jj_consume_token(164);
          break;
          }
        case 165:{
          jj_consume_token(165);
          break;
          }
        default:
          jj_la1[112] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PlSqlMultiplicativeExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PlSqlMultiplicativeExpression() throws ParseException {/*@bgen(jjtree) PlSqlMultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPLSQLMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PlSqlExponentExpression();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_IDENTIFIER:
        case 166:
        case 167:{
          ;
          break;
          }
        default:
          jj_la1[113] = jj_gen;
          break label_22;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 166:{
          jj_consume_token(166);
          break;
          }
        case 167:{
          jj_consume_token(167);
          break;
          }
        case S_IDENTIFIER:{
          ID("MOD");
          break;
          }
        default:
          jj_la1[114] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PlSqlExponentExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PlSqlExponentExpression() throws ParseException {/*@bgen(jjtree) PlSqlExponentExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPLSQLEXPONENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PlSqlUnaryExpression();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 168:{
          ;
          break;
          }
        default:
          jj_la1[115] = jj_gen;
          break label_23;
        }
        jj_consume_token(168);
        PlSqlUnaryExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PlSqlUnaryExpression() throws ParseException {/*@bgen(jjtree) PlSqlUnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPLSQLUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 163:
      case 164:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 163:{
          jj_consume_token(163);
          break;
          }
        case 164:{
          jj_consume_token(164);
          break;
          }
        default:
          jj_la1[116] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PlSqlPrimaryExpression();
        break;
        }
      case K_CASE:
      case K_CAST:
      case K_NULL:
      case K_SQL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 150:
      case 154:{
        PlSqlPrimaryExpression();
        break;
        }
      default:
        jj_la1[117] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PlSqlPrimaryExpression() throws ParseException {/*@bgen(jjtree) PlSqlPrimaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPLSQLPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_NUMBER:{
        jj_consume_token(S_NUMBER);
        break;
        }
      case S_CHAR_LITERAL:{
        jj_consume_token(S_CHAR_LITERAL);
        break;
        }
      case K_NULL:{
        jj_consume_token(K_NULL);
        break;
        }
      case K_CASE:{
        SQLCaseExpression();
        break;
        }
      case 154:{
        jj_consume_token(154);
        if (jj_2_21(3)) {
          SelectStatement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_CASE:
          case K_CAST:
          case K_NOT:
          case K_NULL:
          case K_SQL:
          case S_NUMBER:
          case S_IDENTIFIER:
          case S_BIND:
          case S_CHAR_LITERAL:
          case S_QUOTED_IDENTIFIER:
          case 150:
          case 154:
          case 163:
          case 164:{
            PlSqlExpression();
            break;
            }
          default:
            jj_la1[118] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(155);
        break;
        }
      case S_BIND:
      case 150:{
        BindVariable();
        break;
        }
      default:
        jj_la1[120] = jj_gen;
        if (jj_2_22(2)) {
          SQLCastExpression();
        } else if (jj_2_23(2147483647)) {
          IntervalExpression();
        } else if (jj_2_24(2)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S_IDENTIFIER:{
            jj_consume_token(S_IDENTIFIER);
            break;
            }
          case K_SQL:{
            jj_consume_token(K_SQL);
            break;
            }
          default:
            jj_la1[119] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(169);
          ID("FOUND|NOTFOUND|ISOPEN|ROWCOUNT");
        } else if (jj_2_25(2147483647)) {
          FunctionCall();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S_IDENTIFIER:
          case S_QUOTED_IDENTIFIER:{
            ObjectReference();
            break;
            }
          default:
            jj_la1[121] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* ----------------------- PLSQL Code Block Ends here -------------- */

/* ---------------- General Productions --------------------- */
  final public 
void TableColumn() throws ParseException {/*@bgen(jjtree) TableColumn */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLECOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ObjectReference();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public String OracleObjectName() throws ParseException {/*@bgen(jjtree) OracleObjectName */
  SimpleNode jjtn000 = new SimpleNode(JJTORACLEOBJECTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
{if ("" != null) return token.image;}
        break;
        }
      case S_QUOTED_IDENTIFIER:{
        jj_consume_token(S_QUOTED_IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
String s = token.image; {if ("" != null) return s.substring(1, s.length() - 1);}
        break;
        }
      default:
        jj_la1[122] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String TNSName() throws ParseException {/*@bgen(jjtree) TNSName */
    SimpleNode jjtn000 = new SimpleNode(JJTTNSNAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);StringBuilder name = new StringBuilder();
    try {
      jj_consume_token(S_IDENTIFIER);
name.append(token.image);
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 151:{
          ;
          break;
          }
        default:
          jj_la1[123] = jj_gen;
          break label_24;
        }
        jj_consume_token(151);
        jj_consume_token(S_IDENTIFIER);
name.append(".").append(token.image);
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return name.toString();}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Relop() throws ParseException {/*@bgen(jjtree) Relop */
  SimpleNode jjtn000 = new SimpleNode(JJTRELOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 152:{
        jj_consume_token(152);
        break;
        }
      case 170:{
        jj_consume_token(170);
        jj_consume_token(152);
        break;
        }
      case 171:{
        jj_consume_token(171);
        break;
        }
      default:
        jj_la1[124] = jj_gen;
        if (jj_2_26(2)) {
          jj_consume_token(172);
          jj_consume_token(152);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 172:{
            jj_consume_token(172);
            break;
            }
          default:
            jj_la1[125] = jj_gen;
            if (jj_2_27(2)) {
              jj_consume_token(173);
              jj_consume_token(172);
            } else if (jj_2_28(2)) {
              jj_consume_token(173);
              jj_consume_token(152);
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case 173:{
                jj_consume_token(173);
                break;
                }
              default:
                jj_la1[126] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TableName() throws ParseException {/*@bgen(jjtree) TableName */
    SimpleNode jjtn000 = new SimpleNode(JJTTABLENAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String s;
    StringBuilder name = new StringBuilder();
    try {
      // schema.table@link
          s = OracleObjectName();
name.append(s);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 151:{
        jj_consume_token(151);
        s = OracleObjectName();
name.append(".").append(s);
        break;
        }
      default:
        jj_la1[127] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 174:{
        jj_consume_token(174);
        s = TNSName();
name.append("@").append(s);
        break;
        }
      default:
        jj_la1[128] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
tables.add(name.toString().toUpperCase());
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ParameterList() throws ParseException {/*@bgen(jjtree) ParameterList */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Parameter();
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 156:{
          ;
          break;
          }
        default:
          jj_la1[129] = jj_gen;
          break label_25;
        }
        jj_consume_token(156);
        Parameter();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NumOrID() throws ParseException {/*@bgen(jjtree) NumOrID */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMORID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      case S_NUMBER:
      case 163:
      case 164:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 163:
        case 164:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 163:{
            jj_consume_token(163);
            break;
            }
          case 164:{
            jj_consume_token(164);
            break;
            }
          default:
            jj_la1[130] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[131] = jj_gen;
          ;
        }
        jj_consume_token(S_NUMBER);
        break;
        }
      default:
        jj_la1[132] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Parameter() throws ParseException {/*@bgen(jjtree) Parameter */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_BINARY_INTEGER:
      case K_BOOLEAN:
      case K_CHAR:
      case K_DATE:
      case K_FLOAT:
      case K_IN:
      case K_INTEGER:
      case K_NATURAL:
      case K_NUMBER:
      case K_OUT:
      case K_REAL:
      case K_TABLE:
      case K_VARCHAR2:
      case K_VARCHAR:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_IN:{
          jj_consume_token(K_IN);
          break;
          }
        default:
          jj_la1[133] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_OUT:{
          jj_consume_token(K_OUT);
          break;
          }
        default:
          jj_la1[134] = jj_gen;
          ;
        }
        TypeDefinition();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_DEFAULT:
        case 157:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 157:{
            jj_consume_token(157);
            break;
            }
          case K_DEFAULT:{
            jj_consume_token(K_DEFAULT);
            break;
            }
          default:
            jj_la1[135] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          PlSqlExpression();
          break;
          }
        default:
          jj_la1[136] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[137] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Arguments() throws ParseException {/*@bgen(jjtree) Arguments */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Argument();
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 156:{
          ;
          break;
          }
        default:
          jj_la1[138] = jj_gen;
          break label_26;
        }
        jj_consume_token(156);
        Argument();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Argument() throws ParseException {/*@bgen(jjtree) Argument */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_29(2)) {
        jj_consume_token(S_IDENTIFIER);
        jj_consume_token(175);
      } else {
        ;
      }
      PlSqlExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* --------------- General Productions ends here --------------- */

/* ----------- SQL productions start here ----------------- */
  final public 
void SelectStatement() throws ParseException {/*@bgen(jjtree) SelectStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SelectWithoutOrder();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ORDER:{
        OrderByClause();
        break;
        }
      default:
        jj_la1[139] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_FOR:{
        ForUpdateClause();
        break;
        }
      default:
        jj_la1[140] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_SKIP:{
        jj_consume_token(K_SKIP);
        ID("LOCKED");
        break;
        }
      default:
        jj_la1[141] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SelectWithoutOrder() throws ParseException {/*@bgen(jjtree) SelectWithoutOrder */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTWITHOUTORDER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SelectSet();
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_INTERSECT:
        case K_MINUS:
        case K_UNION:{
          ;
          break;
          }
        default:
          jj_la1[142] = jj_gen;
          break label_27;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_UNION:{
          jj_consume_token(K_UNION);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_ALL:{
            jj_consume_token(K_ALL);
            break;
            }
          default:
            jj_la1[143] = jj_gen;
            ;
          }
          break;
          }
        case K_INTERSECT:{
          jj_consume_token(K_INTERSECT);
          break;
          }
        case K_MINUS:{
          jj_consume_token(K_MINUS);
          break;
          }
        default:
          jj_la1[144] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        SelectSet();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SelectSet() throws ParseException {/*@bgen(jjtree) SelectSet */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_SELECT:{
        Select();
        break;
        }
      case 154:{
        jj_consume_token(154);
        SubQuery();
        jj_consume_token(155);
        break;
        }
      default:
        jj_la1[145] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Select() throws ParseException {/*@bgen(jjtree) Select */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SELECT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:
      case K_UNIQUE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_ALL:{
          jj_consume_token(K_ALL);
          break;
          }
        case K_DISTINCT:{
          jj_consume_token(K_DISTINCT);
          break;
          }
        case K_UNIQUE:{
          jj_consume_token(K_UNIQUE);
          break;
          }
        default:
          jj_la1[146] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[147] = jj_gen;
        ;
      }
      SelectList();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_INTO:{
        IntoClause();
        break;
        }
      default:
        jj_la1[148] = jj_gen;
        ;
      }
      FromClause();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_WHERE:{
        WhereClause();
        break;
        }
      default:
        jj_la1[149] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_CONNECT:
      case K_START:{
        ConnectClause();
        break;
        }
      default:
        jj_la1[150] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_GROUP:
      case K_HAVING:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_HAVING:{
          HavingClause();
          GroupByClause();
          break;
          }
        case K_GROUP:{
          GroupByClause();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_HAVING:{
            HavingClause();
            break;
            }
          default:
            jj_la1[151] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[152] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[153] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Checks for whatever follows  SELECT */
  final public void SelectList() throws ParseException {/*@bgen(jjtree) SelectList */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 166:{
        jj_consume_token(166);
        break;
        }
      default:
        jj_la1[155] = jj_gen;
        if (jj_2_30(1)) {
          SelectItem();
          label_28:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 156:{
              ;
              break;
              }
            default:
              jj_la1[154] = jj_gen;
              break label_28;
            }
            jj_consume_token(156);
            SelectItem();
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SelectItem() throws ParseException {/*@bgen(jjtree) SelectItem */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_31(2)) {
        OracleObjectName();
        jj_consume_token(176);
      } else if (jj_2_32(4)) {
        OracleObjectName();
        jj_consume_token(151);
        OracleObjectName();
        jj_consume_token(176);
      } else if (jj_2_33(1)) {
        SQLSimpleExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_AS:
      case K_RETURNING:
      case K_WHEN:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_AS:{
          jj_consume_token(K_AS);
          break;
          }
        default:
          jj_la1[156] = jj_gen;
          ;
        }
        SelectItemAlias();
        break;
        }
      default:
        jj_la1[157] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SelectItemAlias() throws ParseException {/*@bgen(jjtree) SelectItemAlias */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTITEMALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        OracleObjectName();
        break;
        }
      case K_RETURNING:{
        jj_consume_token(K_RETURNING);
        break;
        }
      case K_WHEN:{
        jj_consume_token(K_WHEN);
        break;
        }
      default:
        jj_la1[158] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AnalyticFunction() throws ParseException {/*@bgen(jjtree) AnalyticFunction */
  SimpleNode jjtn000 = new SimpleNode(JJTANALYTICFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FunctionCall();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_OVER:{
        jj_consume_token(K_OVER);
        jj_consume_token(154);
        AnalyticClause();
        jj_consume_token(155);
        break;
        }
      default:
        jj_la1[159] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AnalyticClause() throws ParseException {/*@bgen(jjtree) AnalyticClause */
  SimpleNode jjtn000 = new SimpleNode(JJTANALYTICCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_PARTITION:{
        QueryPartitionClause();
        break;
        }
      default:
        jj_la1[160] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ORDER:{
        OrderByClause();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_RANGE:
        case K_ROWS:{
          WindowingClause();
          break;
          }
        default:
          jj_la1[161] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[162] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void QueryPartitionClause() throws ParseException {/*@bgen(jjtree) QueryPartitionClause */
  SimpleNode jjtn000 = new SimpleNode(JJTQUERYPARTITIONCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_PARTITION);
      jj_consume_token(K_BY);
      SQLExpression();
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 156:{
          ;
          break;
          }
        default:
          jj_la1[163] = jj_gen;
          break label_29;
        }
        jj_consume_token(156);
        SQLExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void WindowingClause() throws ParseException {/*@bgen(jjtree) WindowingClause */
  SimpleNode jjtn000 = new SimpleNode(JJTWINDOWINGCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ROWS:{
        jj_consume_token(K_ROWS);
        break;
        }
      case K_RANGE:{
        jj_consume_token(K_RANGE);
        break;
        }
      default:
        jj_la1[164] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_CURRENT:{
        jj_consume_token(K_CURRENT);
        jj_consume_token(K_ROW);
        break;
        }
      default:
        jj_la1[167] = jj_gen;
        if (jj_2_36(1)) {
          SQLSimpleExpression();
          ID("PRECEDING");
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_BETWEEN:{
            jj_consume_token(K_BETWEEN);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case K_CURRENT:{
              jj_consume_token(K_CURRENT);
              jj_consume_token(K_ROW);
              break;
              }
            default:
              jj_la1[165] = jj_gen;
              if (jj_2_34(1)) {
                SQLSimpleExpression();
                ID("PRECEDING|FOLLOWING");
              } else {
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            jj_consume_token(K_AND);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case K_CURRENT:{
              jj_consume_token(K_CURRENT);
              jj_consume_token(K_ROW);
              break;
              }
            default:
              jj_la1[166] = jj_gen;
              if (jj_2_35(1)) {
                SQLSimpleExpression();
                ID("PRECEDING|FOLLOWING");
              } else {
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            break;
            }
          default:
            jj_la1[168] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void IntoClause() throws ParseException {/*@bgen(jjtree) IntoClause */
  SimpleNode jjtn000 = new SimpleNode(JJTINTOCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_INTO);
      DataItem();
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 156:{
          ;
          break;
          }
        default:
          jj_la1[169] = jj_gen;
          break label_30;
        }
        jj_consume_token(156);
        DataItem();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void DataItem() throws ParseException {/*@bgen(jjtree) DataItem */
  SimpleNode jjtn000 = new SimpleNode(JJTDATAITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 151:{
          jj_consume_token(151);
          jj_consume_token(S_IDENTIFIER);
          break;
          }
        default:
          jj_la1[170] = jj_gen;
          ;
        }
        break;
        }
      case S_BIND:
      case 150:{
        BindVariable();
        break;
        }
      default:
        jj_la1[171] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 154:{
        jj_consume_token(154);
        PlSqlSimpleExpression();
        jj_consume_token(155);
        break;
        }
      default:
        jj_la1[172] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void FromClause() throws ParseException {/*@bgen(jjtree) FromClause */
  SimpleNode jjtn000 = new SimpleNode(JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FROM);
      TableReference();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 156:{
          ;
          break;
          }
        default:
          jj_la1[173] = jj_gen;
          break label_31;
        }
        jj_consume_token(156);
        TableReference();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TableReference() throws ParseException {/*@bgen(jjtree) TableReference */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLEREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ONLY:{
        jj_consume_token(K_ONLY);
        jj_consume_token(154);
        QueryTableExpression();
        jj_consume_token(155);
        break;
        }
      case K_TABLE:
      case S_IDENTIFIER:
      case S_BIND:
      case S_QUOTED_IDENTIFIER:
      case 150:
      case 154:{
        QueryTableExpression();
        break;
        }
      default:
        jj_la1[174] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void QueryTableExpression() throws ParseException {/*@bgen(jjtree) QueryTableExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTQUERYTABLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        TableName();
        break;
        }
      case K_TABLE:{
        TableCollectionExpression();
        break;
        }
      default:
        jj_la1[175] = jj_gen;
        if (jj_2_37(3)) {
          jj_consume_token(154);
          SubQuery();
          jj_consume_token(155);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 154:{
            jj_consume_token(154);
            TableReference();
            jj_consume_token(155);
            break;
            }
          case S_BIND:
          case 150:{
            BindVariable();
            break;
            }
          default:
            jj_la1[176] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_PX_GRANULE:{
        jj_consume_token(K_PX_GRANULE);
        jj_consume_token(154);
        jj_consume_token(S_NUMBER);
        jj_consume_token(156);
        jj_consume_token(S_IDENTIFIER);
        jj_consume_token(156);
        jj_consume_token(S_IDENTIFIER);
        jj_consume_token(155);
        break;
        }
      default:
        jj_la1[177] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_SAMPLE:{
        jj_consume_token(K_SAMPLE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_IDENTIFIER:{
          ID("BLOCK");
          break;
          }
        default:
          jj_la1[178] = jj_gen;
          ;
        }
        jj_consume_token(154);
        jj_consume_token(S_NUMBER);
        jj_consume_token(155);
        break;
        }
      default:
        jj_la1[179] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        OracleObjectName();
        break;
        }
      default:
        jj_la1[180] = jj_gen;
        ;
      }
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_FULL:
        case K_INNER:
        case K_LEFT:
        case K_RIGHT:{
          ;
          break;
          }
        default:
          jj_la1[181] = jj_gen;
          break label_32;
        }
        Join();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TableCollectionExpression() throws ParseException {/*@bgen(jjtree) TableCollectionExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLECOLLECTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_TABLE);
      jj_consume_token(154);
      SQLSimpleExpression();
      jj_consume_token(155);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 154:{
        jj_consume_token(154);
        jj_consume_token(163);
        jj_consume_token(155);
        break;
        }
      default:
        jj_la1[182] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Join() throws ParseException {/*@bgen(jjtree) Join */
  SimpleNode jjtn000 = new SimpleNode(JJTJOIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      JoinType();
      ID("JOIN");
      TableReference();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ON:{
        jj_consume_token(K_ON);
        SQLExpression();
        break;
        }
      case K_USING:{
        jj_consume_token(K_USING);
        jj_consume_token(154);
        ColumnName();
        label_33:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 156:{
            ;
            break;
            }
          default:
            jj_la1[183] = jj_gen;
            break label_33;
          }
          jj_consume_token(156);
          ColumnName();
        }
        jj_consume_token(155);
        break;
        }
      default:
        jj_la1[184] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void JoinType() throws ParseException {/*@bgen(jjtree) JoinType */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_INNER:{
        jj_consume_token(K_INNER);
        break;
        }
      case K_FULL:
      case K_LEFT:
      case K_RIGHT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_LEFT:{
          jj_consume_token(K_LEFT);
          break;
          }
        case K_RIGHT:{
          jj_consume_token(K_RIGHT);
          break;
          }
        case K_FULL:{
          jj_consume_token(K_FULL);
          break;
          }
        default:
          jj_la1[185] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ID("OUTER");
        break;
        }
      default:
        jj_la1[186] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ColumnName() throws ParseException {/*@bgen(jjtree) ColumnName */
  SimpleNode jjtn000 = new SimpleNode(JJTCOLUMNNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(S_IDENTIFIER);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void WhereClause() throws ParseException {/*@bgen(jjtree) WhereClause */
  SimpleNode jjtn000 = new SimpleNode(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_WHERE);
      SQLExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ConnectClause() throws ParseException {/*@bgen(jjtree) ConnectClause */
  SimpleNode jjtn000 = new SimpleNode(JJTCONNECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_START:{
        jj_consume_token(K_START);
        jj_consume_token(K_WITH);
        SQLExpression();
        break;
        }
      default:
        jj_la1[187] = jj_gen;
        ;
      }
      jj_consume_token(K_CONNECT);
      jj_consume_token(K_BY);
      SQLExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_START:{
        jj_consume_token(K_START);
        jj_consume_token(K_WITH);
        SQLExpression();
        break;
        }
      default:
        jj_la1[188] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void GroupByClause() throws ParseException {/*@bgen(jjtree) GroupByClause */
  SimpleNode jjtn000 = new SimpleNode(JJTGROUPBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_GROUP);
      jj_consume_token(K_BY);
      SQLExpressionList();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void HavingClause() throws ParseException {/*@bgen(jjtree) HavingClause */
  SimpleNode jjtn000 = new SimpleNode(JJTHAVINGCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_HAVING);
      SQLExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void OrderByClause() throws ParseException {/*@bgen(jjtree) OrderByClause */
  SimpleNode jjtn000 = new SimpleNode(JJTORDERBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_ORDER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_SIBLINGS:{
        jj_consume_token(K_SIBLINGS);
        break;
        }
      default:
        jj_la1[189] = jj_gen;
        ;
      }
      jj_consume_token(K_BY);
      OrderByExpression();
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 156:{
          ;
          break;
          }
        default:
          jj_la1[190] = jj_gen;
          break label_34;
        }
        jj_consume_token(156);
        OrderByExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void OrderByExpression() throws ParseException {/*@bgen(jjtree) OrderByExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTORDERBYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLSimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ASC:
      case K_DESC:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_ASC:{
          jj_consume_token(K_ASC);
          break;
          }
        case K_DESC:{
          jj_consume_token(K_DESC);
          break;
          }
        default:
          jj_la1[191] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[192] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NULLS:{
        jj_consume_token(K_NULLS);
        ID("LAST");
        break;
        }
      default:
        jj_la1[193] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ForUpdateClause() throws ParseException {/*@bgen(jjtree) ForUpdateClause */
  SimpleNode jjtn000 = new SimpleNode(JJTFORUPDATECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FOR);
      jj_consume_token(K_UPDATE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_OF:{
        jj_consume_token(K_OF);
        TableColumn();
        label_35:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 156:{
            ;
            break;
            }
          default:
            jj_la1[194] = jj_gen;
            break label_35;
          }
          jj_consume_token(156);
          TableColumn();
        }
        break;
        }
      default:
        jj_la1[195] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOWAIT:
      case K_WAIT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_NOWAIT:{
          jj_consume_token(K_NOWAIT);
          break;
          }
        case K_WAIT:{
          jj_consume_token(K_WAIT);
          SQLSimpleExpression();
          break;
          }
        default:
          jj_la1[196] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[197] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SQLExpression() throws ParseException {/*@bgen(jjtree) SQLExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLAndExpression();
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_OR:{
          ;
          break;
          }
        default:
          jj_la1[198] = jj_gen;
          break label_36;
        }
        jj_consume_token(K_OR);
        SQLAndExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SQLAndExpression() throws ParseException {/*@bgen(jjtree) SQLAndExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLUnaryLogicalExpression();
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_AND:{
          ;
          break;
          }
        default:
          jj_la1[199] = jj_gen;
          break label_37;
        }
        jj_consume_token(K_AND);
        SQLUnaryLogicalExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SQLUnaryLogicalExpression() throws ParseException {/*@bgen(jjtree) SQLUnaryLogicalExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLUNARYLOGICALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_38(2)) {
        ExistsClause();
      } else if (jj_2_39(1)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_NOT:{
          jj_consume_token(K_NOT);
          break;
          }
        default:
          jj_la1[200] = jj_gen;
          ;
        }
        SQLRelationalExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ExistsClause() throws ParseException {/*@bgen(jjtree) ExistsClause */
  SimpleNode jjtn000 = new SimpleNode(JJTEXISTSCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[201] = jj_gen;
        ;
      }
      jj_consume_token(K_EXISTS);
      jj_consume_token(154);
      SubQuery();
      jj_consume_token(155);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SQLRelationalExpression() throws ParseException {/*@bgen(jjtree) SQLRelationalExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_40(2147483647)) {
        jj_consume_token(154);
        SQLExpressionList();
        jj_consume_token(155);
      } else if (jj_2_41(1)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_PRIOR:{
          jj_consume_token(K_PRIOR);
          break;
          }
        default:
          jj_la1[202] = jj_gen;
          ;
        }
        SQLSimpleExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_BETWEEN:
      case K_IN:
      case K_IS:
      case K_LIKE:
      case K_NOT:
      case 152:
      case 170:
      case 171:
      case 172:
      case 173:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 152:
        case 170:
        case 171:
        case 172:
        case 173:{
          SQLRelationalOperatorExpression();
          break;
          }
        default:
          jj_la1[203] = jj_gen;
          if (jj_2_42(2)) {
            SQLInClause();
          } else if (jj_2_43(2)) {
            SQLBetweenClause();
          } else if (jj_2_44(2)) {
            SQLLikeClause();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case K_IS:{
              IsNullClause();
              break;
              }
            default:
              jj_la1[204] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
        }
      default:
        jj_la1[205] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SQLExpressionList() throws ParseException {/*@bgen(jjtree) SQLExpressionList */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLExpression();
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 156:{
          ;
          break;
          }
        default:
          jj_la1[206] = jj_gen;
          break label_38;
        }
        jj_consume_token(156);
        SQLExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SQLRelationalOperatorExpression() throws ParseException {/*@bgen(jjtree) SQLRelationalOperatorExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLRELATIONALOPERATOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Relop();
      if (jj_2_45(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_ALL:
        case K_ANY:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_ALL:{
            jj_consume_token(K_ALL);
            break;
            }
          case K_ANY:{
            jj_consume_token(K_ANY);
            break;
            }
          default:
            jj_la1[207] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[208] = jj_gen;
          ;
        }
        jj_consume_token(154);
        SubQuery();
        jj_consume_token(155);
      } else if (jj_2_46(1)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_PRIOR:{
          jj_consume_token(K_PRIOR);
          break;
          }
        default:
          jj_la1[209] = jj_gen;
          ;
        }
        SQLSimpleExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SQLInClause() throws ParseException {/*@bgen(jjtree) SQLInClause */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLINCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[210] = jj_gen;
        ;
      }
      jj_consume_token(K_IN);
      jj_consume_token(154);
      if (jj_2_47(3)) {
        SubQuery();
      } else if (jj_2_48(1)) {
        SQLExpressionList();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(155);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SQLBetweenClause() throws ParseException {/*@bgen(jjtree) SQLBetweenClause */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLBETWEENCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[211] = jj_gen;
        ;
      }
      jj_consume_token(K_BETWEEN);
      SQLSimpleExpression();
      jj_consume_token(K_AND);
      SQLSimpleExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SQLLikeClause() throws ParseException {/*@bgen(jjtree) SQLLikeClause */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLLIKECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[212] = jj_gen;
        ;
      }
      jj_consume_token(K_LIKE);
      SQLSimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ESCAPE:{
        jj_consume_token(K_ESCAPE);
        SQLSimpleExpression();
        break;
        }
      default:
        jj_la1[213] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SQLSimpleExpression() throws ParseException {/*@bgen(jjtree) SQLSimpleExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLSIMPLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLMultiplicativeExpression();
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 163:
        case 164:
        case 165:{
          ;
          break;
          }
        default:
          jj_la1[214] = jj_gen;
          break label_39;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 163:{
          jj_consume_token(163);
          break;
          }
        case 164:{
          jj_consume_token(164);
          break;
          }
        case 165:{
          jj_consume_token(165);
          break;
          }
        default:
          jj_la1[215] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        SQLMultiplicativeExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SQLMultiplicativeExpression() throws ParseException {/*@bgen(jjtree) SQLMultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLExponentExpression();
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 166:
        case 167:{
          ;
          break;
          }
        default:
          jj_la1[216] = jj_gen;
          break label_40;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 166:{
          jj_consume_token(166);
          break;
          }
        case 167:{
          jj_consume_token(167);
          break;
          }
        default:
          jj_la1[217] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        SQLExponentExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SQLExponentExpression() throws ParseException {/*@bgen(jjtree) SQLExponentExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLEXPONENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLUnaryExpression();
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 168:{
          ;
          break;
          }
        default:
          jj_la1[218] = jj_gen;
          break label_41;
        }
        jj_consume_token(168);
        SQLUnaryExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SQLUnaryExpression() throws ParseException {/*@bgen(jjtree) SQLUnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 163:
      case 164:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 163:{
          jj_consume_token(163);
          break;
          }
        case 164:{
          jj_consume_token(164);
          break;
          }
        default:
          jj_la1[219] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[220] = jj_gen;
        ;
      }
      SQLPrimaryExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SQLPrimaryExpression() throws ParseException {/*@bgen(jjtree) SQLPrimaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_NUMBER:{
        jj_consume_token(S_NUMBER);
        break;
        }
      case S_CHAR_LITERAL:{
        jj_consume_token(S_CHAR_LITERAL);
        break;
        }
      case K_NULL:{
        jj_consume_token(K_NULL);
        break;
        }
      case K_CASE:{
        SQLCaseExpression();
        break;
        }
      case 154:{
        jj_consume_token(154);
        if (jj_2_49(3)) {
          SelectStatement();
        } else if (jj_2_50(1)) {
          SQLExpression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(155);
        break;
        }
      case S_BIND:
      case 150:{
        BindVariable();
        break;
        }
      default:
        jj_la1[221] = jj_gen;
        if (jj_2_51(2)) {
          SQLCastExpression();
        } else if (jj_2_52(2147483647)) {
          IntervalExpression();
        } else if (jj_2_53(2147483647)) {
          OuterJoinExpression();
        } else if (seeAnalyticFunction()) {
          AnalyticFunction();
        } else if (jj_2_54(2147483647)) {
          FunctionCall();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S_IDENTIFIER:
          case S_QUOTED_IDENTIFIER:{
            TableColumn();
            break;
            }
          default:
            jj_la1[222] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SQLCaseExpression() throws ParseException {/*@bgen(jjtree) SQLCaseExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLCASEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CASE);
      if (jj_2_55(1)) {
        SQLSimpleExpression();
        label_42:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_WHEN:{
            ;
            break;
            }
          default:
            jj_la1[223] = jj_gen;
            break label_42;
          }
          jj_consume_token(K_WHEN);
          SQLSimpleExpression();
          jj_consume_token(K_THEN);
          SQLSimpleExpression();
        }
      } else {
        label_43:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_WHEN:{
            ;
            break;
            }
          default:
            jj_la1[224] = jj_gen;
            break label_43;
          }
          jj_consume_token(K_WHEN);
          SQLExpression();
          jj_consume_token(K_THEN);
          SQLSimpleExpression();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ELSE:{
        jj_consume_token(K_ELSE);
        SQLSimpleExpression();
        break;
        }
      default:
        jj_la1[225] = jj_gen;
        ;
      }
      jj_consume_token(K_END);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SQLCastExpression() throws ParseException {/*@bgen(jjtree) SQLCastExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CAST);
      jj_consume_token(154);
      SQLExpression();
      jj_consume_token(K_AS);
      BasicDataTypeDefinition();
      jj_consume_token(155);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void IntervalExpression() throws ParseException {/*@bgen(jjtree) IntervalExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTINTERVALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ID("INTERVAL");
      SQLSimpleExpression();
      if ("DAY".equalsIgnoreCase(getToken(1).image)) {
        ID("DAY");
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 154:{
          jj_consume_token(154);
          jj_consume_token(S_NUMBER);
          jj_consume_token(155);
          break;
          }
        default:
          jj_la1[226] = jj_gen;
          ;
        }
        jj_consume_token(K_TO);
        ID("SECOND");
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 154:{
          jj_consume_token(154);
          jj_consume_token(S_NUMBER);
          jj_consume_token(155);
          break;
          }
        default:
          jj_la1[227] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_IDENTIFIER:{
          ID("YEAR");
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 154:{
            jj_consume_token(154);
            jj_consume_token(S_NUMBER);
            jj_consume_token(155);
            break;
            }
          default:
            jj_la1[228] = jj_gen;
            ;
          }
          jj_consume_token(K_TO);
          ID("MONTH");
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 154:{
            jj_consume_token(154);
            jj_consume_token(S_NUMBER);
            jj_consume_token(155);
            break;
            }
          default:
            jj_la1[229] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[230] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void FunctionCall() throws ParseException {/*@bgen(jjtree) FunctionCall */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FunctionReference();
      if ("TRIM".equalsIgnoreCase(lastObjectReference)) {
        TrimArguments();
      } else if ("EXTRACT".equalsIgnoreCase(lastObjectReference)) {
        jj_consume_token(154);
        DatetimeField();
        jj_consume_token(K_FROM);
        SQLSimpleExpression();
        jj_consume_token(155);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 154:{
          jj_consume_token(154);
          if (jj_2_57(1)) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case K_ALL:
            case K_DISTINCT:
            case K_UNIQUE:{
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case K_ALL:{
                jj_consume_token(K_ALL);
                break;
                }
              case K_DISTINCT:{
                jj_consume_token(K_DISTINCT);
                break;
                }
              case K_UNIQUE:{
                jj_consume_token(K_UNIQUE);
                break;
                }
              default:
                jj_la1[231] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
              }
            default:
              jj_la1[232] = jj_gen;
              ;
            }
            if (jj_2_56(1)) {
              FunctionArgumentList();
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case 166:{
                jj_consume_token(166);
                break;
                }
              default:
                jj_la1[233] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          } else {
            ;
          }
          jj_consume_token(155);
          break;
          }
        default:
          jj_la1[234] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void FunctionReference() throws ParseException {/*@bgen(jjtree) FunctionReference */
    SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONREFERENCE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String name;
    try {
      name = ObjectReference();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
functions.add(name.toUpperCase());
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void FunctionArgumentList() throws ParseException {/*@bgen(jjtree) FunctionArgumentList */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FunctionArgument();
      label_44:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 156:{
          ;
          break;
          }
        default:
          jj_la1[235] = jj_gen;
          break label_44;
        }
        jj_consume_token(156);
        FunctionArgument();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void FunctionArgument() throws ParseException {/*@bgen(jjtree) FunctionArgument */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_58(2)) {
        jj_consume_token(S_IDENTIFIER);
        jj_consume_token(175);
      } else {
        ;
      }
      SQLExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TrimArguments() throws ParseException {/*@bgen(jjtree) TrimArguments */
  SimpleNode jjtn000 = new SimpleNode(JJTTRIMARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(154);
      if (getToken(1).image.matches("(?i)LEADING|TRAILING|BOTH")) {
        jj_consume_token(S_IDENTIFIER);
        if (jj_2_59(1)) {
          SQLSimpleExpression();
        } else {
          ;
        }
        jj_consume_token(K_FROM);
        SQLSimpleExpression();
      } else if (jj_2_60(1)) {
        SQLSimpleExpression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_FROM:{
          jj_consume_token(K_FROM);
          SQLSimpleExpression();
          break;
          }
        default:
          jj_la1[236] = jj_gen;
          ;
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(155);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DatetimeField() throws ParseException {/*@bgen(jjtree) DatetimeField */
  SimpleNode jjtn000 = new SimpleNode(JJTDATETIMEFIELD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(S_IDENTIFIER);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public String ObjectReference() throws ParseException {/*@bgen(jjtree) ObjectReference */
    SimpleNode jjtn000 = new SimpleNode(JJTOBJECTREFERENCE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String s;
    StringBuilder name = new StringBuilder();
    try {
      s = OracleObjectName();
name.append(s);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 151:{
        jj_consume_token(151);
        s = OracleObjectName();
name.append(".").append(s);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 151:{
          jj_consume_token(151);
          s = OracleObjectName();
name.append(".").append(s);
          break;
          }
        default:
          jj_la1[237] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[238] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 174:{
        jj_consume_token(174);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 170:{
          jj_consume_token(170);
          break;
          }
        case S_IDENTIFIER:{
          s = TNSName();
name.append("@").append(s);
          break;
          }
        default:
          jj_la1[239] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[240] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return lastObjectReference = name.toString();}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void OuterJoinExpression() throws ParseException {/*@bgen(jjtree) OuterJoinExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTOUTERJOINEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TableColumn();
      jj_consume_token(154);
      jj_consume_token(163);
      jj_consume_token(155);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SubQuery() throws ParseException {/*@bgen(jjtree) SubQuery */
  SimpleNode jjtn000 = new SimpleNode(JJTSUBQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SelectStatement();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/** Expect an <S_IDENTIFIER> with the given value. */
  final public void ID(String id) throws ParseException {/*@bgen(jjtree) ID */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(S_IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
if (!token.image.matches("(?i)" + id)) {
            {if (true) throw new ParseException("Encountered " + token.image
                + " at line " + token.beginLine + ", column " + token.beginColumn + "."
                + "\u005cnWas expecting: " + id);}
        }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_3_11()
 {
    if (jj_3R_56()) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_56()) return true;
    if (jj_3R_56()) return true;
    if (jj_scan_token(K_INTO)) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_3R_52()) return true;
    if (jj_scan_token(154)) return true;
    if (jj_scan_token(163)) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_211()
 {
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_scan_token(174)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(170)) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    return false;
  }

  private boolean jj_3_59()
 {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_scan_token(151)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(151)) return true;
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_56()
 {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_scan_token(154)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_scan_token(154)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_188()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_60()
 {
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_211()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_229()
 {
    if (jj_scan_token(156)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_199()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_59()) jj_scanpos = xsp;
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_187()
 {
    if (jj_scan_token(154)) return true;
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.matches("(?i)LEADING|TRAILING|BOTH");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3_60()) return true;
    }
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3_58()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(175)) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_3R_101()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_229()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_79()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_57()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) return true;
    }
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(K_FOR)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(K_IN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    if (jj_scan_token(162)) return true;
    return false;
  }

  private boolean jj_3R_189()
 {
    if (jj_scan_token(154)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) jj_scanpos = xsp;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_scan_token(154)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_175()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_174()
 {
    if (jj_scan_token(154)) return true;
    if (jj_3R_188()) return true;
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    if (jj_scan_token(154)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_173()
 {
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_179()
 {
    if (jj_scan_token(K_WHEN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(K_THEN)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_165()
 {
    if (jj_3R_66()) return true;
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = "TRIM".equalsIgnoreCase(lastObjectReference);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_173()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = "EXTRACT".equalsIgnoreCase(lastObjectReference);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_50()
 {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) jj_scanpos = xsp;
    if (jj_scan_token(K_TO)) return true;
    if (jj_3R_56()) return true;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    if (jj_scan_token(K_TO)) return true;
    if (jj_3R_56()) return true;
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_3R_56()) return true;
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = "DAY".equalsIgnoreCase(getToken(1).image);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    return false;
  }

  private boolean jj_3R_180()
 {
    if (jj_scan_token(K_WHEN)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(K_THEN)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_169()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_180()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(K_CAST)) return true;
    if (jj_scan_token(154)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(K_AS)) return true;
    if (jj_3R_171()) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3_55()
 {
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_179()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_170()
 {
    if (jj_scan_token(K_ELSE)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_54()
 {
    if (jj_3R_66()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3_53()
 {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3_52()
 {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_163()
 {
    if (jj_scan_token(K_CASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_170()) jj_scanpos = xsp;
    if (jj_scan_token(K_END)) return true;
    return false;
  }

  private boolean jj_3R_153()
 {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_scan_token(168)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_152()
 {
    if (jj_3R_165()) return true;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_151()
 {
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_150()
 {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_scan_token(167)) return true;
    }
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_149()
 {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_253()
 {
    if (jj_scan_token(K_ESCAPE)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(165)) return true;
    }
    }
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3_51()
 {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_148()
 {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_147()
 {
    if (jj_scan_token(154)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) return true;
    }
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_146()
 {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3_48()
 {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = seeAnalyticFunction();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) return true;
    }
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_scan_token(154)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_125()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_3R_125()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_126()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_3R_115()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(154)) return true;
    if (jj_scan_token(K_SELECT)) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) jj_scanpos = xsp;
    if (jj_scan_token(153)) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_69()) return true;
    xsp = jj_scanpos;
    if (jj_3R_253()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_74()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_238()
 {
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(154)) return true;
    xsp = jj_scanpos;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) return true;
    }
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_262()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    return false;
  }

  private boolean jj_3_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(91)) jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_249()
 {
    if (jj_scan_token(156)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_252()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_262()) jj_scanpos = xsp;
    if (jj_scan_token(154)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_250()
 {
    if (jj_3R_212()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3_46()) return true;
    }
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_249()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_53()) return true;
    if (jj_scan_token(157)) return true;
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_scan_token(154)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(156)) return true;
    return false;
  }

  private boolean jj_3R_195()
 {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_226()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_237()
 {
    if (jj_3R_250()) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(91)) jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_216()
 {
    if (jj_scan_token(156)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_scan_token(154)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_205()
 {
    if (jj_scan_token(156)) return true;
    if (jj_3R_204()) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3_41()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_226()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_275()
 {
    if (jj_scan_token(156)) return true;
    if (jj_3R_274()) return true;
    return false;
  }

  private boolean jj_3R_184()
 {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) jj_scanpos = xsp;
    if (jj_scan_token(K_EXISTS)) return true;
    if (jj_scan_token(154)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) return true;
    }
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_206()
 {
    if (jj_scan_token(K_OF)) return true;
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_216()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_217()
 {
    if (jj_scan_token(K_WAIT)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_3R_109()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_195()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_184()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_207()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_3R_217()) return true;
    }
    return false;
  }

  private boolean jj_3R_272()
 {
    if (jj_scan_token(K_USING)) return true;
    if (jj_scan_token(154)) return true;
    if (jj_3R_274()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_275()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_194()
 {
    if (jj_scan_token(K_FOR)) return true;
    if (jj_scan_token(K_UPDATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_215()
 {
    if (jj_scan_token(K_NULLS)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_214()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    return false;
  }

  private boolean jj_3R_204()
 {
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_193()
 {
    if (jj_scan_token(K_ORDER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(113)) jj_scanpos = xsp;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_204()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_205()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_208()
 {
    if (jj_scan_token(156)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_246()
 {
    if (jj_scan_token(K_HAVING)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_271()
 {
    if (jj_scan_token(K_ON)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_247()
 {
    if (jj_scan_token(K_GROUP)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_269()
 {
    if (jj_scan_token(154)) return true;
    if (jj_scan_token(163)) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_245()
 {
    if (jj_scan_token(K_START)) return true;
    if (jj_scan_token(K_WITH)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(K_INDEX)) return true;
    if (jj_scan_token(K_BY)) return true;
    return false;
  }

  private boolean jj_3R_244()
 {
    if (jj_scan_token(K_START)) return true;
    if (jj_scan_token(K_WITH)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_196()
 {
    if (jj_scan_token(154)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) jj_scanpos = xsp;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_234()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_244()) jj_scanpos = xsp;
    if (jj_scan_token(K_CONNECT)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_58()) return true;
    xsp = jj_scanpos;
    if (jj_3R_245()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_233()
 {
    if (jj_scan_token(K_WHERE)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_274()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_52()) return true;
    if (jj_scan_token(158)) return true;
    return false;
  }

  private boolean jj_3R_171()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_185()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_196()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_273()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    }
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_270()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_3R_273()) return true;
    }
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(158)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) return true;
    }
    return false;
  }

  private boolean jj_3R_266()
 {
    if (jj_3R_270()) return true;
    if (jj_3R_56()) return true;
    if (jj_3R_231()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_271()) {
    jj_scanpos = xsp;
    if (jj_3R_272()) return true;
    }
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_265()
 {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_264()
 {
    if (jj_scan_token(K_TABLE)) return true;
    if (jj_scan_token(154)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(155)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_269()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_232()
 {
    if (jj_scan_token(156)) return true;
    if (jj_3R_231()) return true;
    return false;
  }

  private boolean jj_3R_261()
 {
    if (jj_3R_266()) return true;
    return false;
  }

  private boolean jj_3R_260()
 {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_259()
 {
    if (jj_scan_token(K_SAMPLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_265()) jj_scanpos = xsp;
    if (jj_scan_token(154)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_258()
 {
    if (jj_scan_token(K_PX_GRANULE)) return true;
    if (jj_scan_token(154)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(156)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(156)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_257()
 {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_256()
 {
    if (jj_scan_token(154)) return true;
    if (jj_3R_231()) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_scan_token(154)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_255()
 {
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3R_254()
 {
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_251()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    if (jj_3R_257()) return true;
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_258()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_259()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_260()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_261()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_scan_token(151)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_243()
 {
    if (jj_3R_251()) return true;
    return false;
  }

  private boolean jj_3R_210()
 {
    if (jj_3R_219()) return true;
    return false;
  }

  private boolean jj_3R_242()
 {
    if (jj_scan_token(K_ONLY)) return true;
    if (jj_scan_token(154)) return true;
    if (jj_3R_251()) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_231()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) return true;
    }
    return false;
  }

  private boolean jj_3R_241()
 {
    if (jj_scan_token(156)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_218()
 {
    if (jj_scan_token(156)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_scan_token(K_FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_231()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_232()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_scan_token(154)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_3R_69()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_240()
 {
    if (jj_scan_token(K_CURRENT)) return true;
    if (jj_scan_token(K_ROW)) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_3R_69()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_239()
 {
    if (jj_scan_token(K_CURRENT)) return true;
    if (jj_scan_token(K_ROW)) return true;
    return false;
  }

  private boolean jj_3R_198()
 {
    if (jj_3R_193()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_162()
 {
    if (jj_scan_token(K_INTO)) return true;
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_241()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_scan_token(K_PROCEDURE)) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(K_PRAGMA)) return true;
    return false;
  }

  private boolean jj_3R_228()
 {
    if (jj_scan_token(K_BETWEEN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    if (jj_scan_token(K_AND)) return true;
    xsp = jj_scanpos;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_3R_69()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_248()
 {
    if (jj_3R_246()) return true;
    return false;
  }

  private boolean jj_3R_227()
 {
    if (jj_scan_token(K_CURRENT)) return true;
    if (jj_scan_token(K_ROW)) return true;
    return false;
  }

  private boolean jj_3R_219()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_172()
 {
    if (jj_scan_token(K_OVER)) return true;
    if (jj_scan_token(154)) return true;
    if (jj_3R_186()) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_scan_token(K_CURSOR)) return true;
    return false;
  }

  private boolean jj_3R_209()
 {
    if (jj_scan_token(K_PARTITION)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_218()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_197()
 {
    if (jj_3R_209()) return true;
    return false;
  }

  private boolean jj_3R_186()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_236()
 {
    if (jj_3R_247()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_248()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_scan_token(151)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_164()
 {
    if (jj_3R_165()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = !seeTYPE();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_49()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = !seeTYPE();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_50()) return true;
    }
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_168()
 {
    if (jj_scan_token(156)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_191()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_202()
 {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = seeTYPE();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_51()
 {
    Token xsp;
    if (jj_3_1()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_178()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_68()) return true;
    if (jj_scan_token(151)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(176)) return true;
    return false;
  }

  private boolean jj_3R_128()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_68()) return true;
    if (jj_scan_token(176)) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_178()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_168()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_143()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    return false;
  }

  private boolean jj_3R_142()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_225()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) return true;
    }
    return false;
  }

  private boolean jj_3R_235()
 {
    if (jj_3R_246()) return true;
    if (jj_3R_247()) return true;
    return false;
  }

  private boolean jj_3R_224()
 {
    if (jj_3R_234()) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_scan_token(150)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_scan_token(154)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_223()
 {
    if (jj_3R_233()) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    return false;
  }

  private boolean jj_3R_144()
 {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_203()
 {
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_192()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) return true;
    }
    }
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_scan_token(K_SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    xsp = jj_scanpos;
    if (jj_3R_223()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_3R_110()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_192()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_183()
 {
    if (jj_scan_token(K_SKIP)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_182()
 {
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_181()
 {
    if (jj_3R_193()) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_3R_93()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_182()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_scan_token(156)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(175)) return true;
    return false;
  }

  private boolean jj_3R_129()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_3R_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_268()
 {
    if (jj_scan_token(174)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_267()
 {
    if (jj_scan_token(151)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_263()
 {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_267()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_268()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_scan_token(173)) return true;
    if (jj_scan_token(152)) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_scan_token(173)) return true;
    if (jj_scan_token(172)) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_scan_token(172)) return true;
    if (jj_scan_token(152)) return true;
    return false;
  }

  private boolean jj_3R_220()
 {
    if (jj_scan_token(170)) return true;
    if (jj_scan_token(152)) return true;
    return false;
  }

  private boolean jj_3R_212()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_scan_token(171)) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_scan_token(172)) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_scan_token(173)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_177()
 {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    if (jj_scan_token(151)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_127()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_138()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_scan_token(S_QUOTED_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_66()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_131()
 {
    if (jj_scan_token(168)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_161()
 {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_160()
 {
    if (jj_3R_165()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) return true;
    }
    if (jj_scan_token(169)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    }
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_159()
 {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_158()
 {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_107()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(165)) return true;
    }
    }
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_157()
 {
    if (jj_scan_token(154)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_156()
 {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_141()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_222()
 {
    if (jj_scan_token(K_ESCAPE)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_122()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    return false;
  }

  private boolean jj_3R_133()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) return true;
    }
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_3R_122()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_131()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_213()
 {
    if (jj_scan_token(K_IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) jj_scanpos = xsp;
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_230()
 {
    if (jj_scan_token(156)) return true;
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_57()) return true;
    xsp = jj_scanpos;
    if (jj_3R_222()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_61()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(154)) return true;
    if (jj_3R_221()) return true;
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_167()
 {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_166()) return true;
    return false;
  }

  private boolean jj_3R_221()
 {
    if (jj_3R_140()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_230()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_201()
 {
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_155()
 {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_190()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_200()
 {
    if (jj_3R_212()) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_176()
 {
    if (jj_3R_57()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_166()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_154()
 {
    if (jj_3R_166()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_167()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_140()
 {
    if (jj_3R_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_155()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(154)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_58()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PlSqlTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[241];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x510840,0x0,0x0,0x0,0x0,0x0,0x200000,0x20000000,0x42086000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40086000,0x0,0x80000,0x0,0x0,0x40086000,0x0,0x0,0x500800,0x0,0x0,0x0,0x500800,0x0,0x500000,0x60000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0xc000000,0x0,0x20,0xc000000,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x80,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000,0x60000,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40086000,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x20,0x20,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x10000000,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x120,0x120,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2266c005,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40010400,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x2,0x0,0x40010000,0x0,0x40010000,0x0,0x0,0x40010000,0x400,0x0,0x2246c005,0x0,0x0,0x1,0x2246c005,0x20000004,0x20008004,0x0,0x0,0x0,0x0,0x80,0x40,0x0,0x20000,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x2,0x2,0x44010000,0x0,0x0,0x20000,0x0,0x80000000,0x0,0x80000000,0x0,0x10,0x10,0x0,0x0,0x0,0x1000000,0x1800000,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10100000,0x0,0x0,0x0,0x100000,0x10100000,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x10,0x10,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x500410e0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x4200,0x0,0x0,0x2,0x0,0x2,0x400,0x0,0x0,0x400,0x0,0x0,0x4200,0x0,0x4200,0x0,0x0,0x4200,0x0,0x0,0x400410e0,0x0,0x80000,0x0,0x400410e0,0x0,0x400a0,0x1400,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x400,0x0,0x2,0x412,0x0,0x400,0x400,0x400,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x1400,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x204200,0x0,0x100000,0x0,0x0,0x100,0x0,0x100,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x1000000,0x80000000,0x100000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x20000000,0x0,0x0,0x0,0x8,0x0,0x0,0x10000,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x8000,0x800,0x800,0x80000,0x0,0x400,0x400,0x8000000,0x0,0x2,0x412,0x0,0x0,0x0,0x8000000,0x400,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x2000b110,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400002,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400002,0x0,0x2,0x0,0x0,0x2,0x0,0x0,0x2000b110,0x0,0x0,0x0,0x2000b110,0x20000000,0x2000b100,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x2000000,0x0,0x0,0x4001,0x40000001,0x0,0x0,0x0,0x4000000,0x10000,0x20000200,0x20000200,0x10200,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400002,0x0,0x0,0x0,0x40000,0x8000000,0x0,0x8000000,0x2000,0x10000000,0x10000000,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x400,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x400000,0x0,0x0,0x0,0x800,0x0,0x80,0x0,0x0,0x80000000,0x80,0x80,0x200000,0x200000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x4690040,0x800000,0x10400,0x480000,0x10000,0x100000,0x0,0x10000,0x210006,0x4000000,0x4000000,0x2000000,0x4000000,0x2000000,0x0,0x20000000,0x20000000,0x0,0x20000000,0xc0000000,0x6,0x10000,0x6,0x10000000,0x4000000,0x6,0x0,0x10000,0x4690040,0x10,0x0,0x0,0x4000040,0x0,0x4000000,0x4790400,0x4000000,0x10000,0x10,0x0,0x0,0x10000,0x40,0x10000,0x0,0x0,0x0,0x4000000,0x4210000,0x10000,0x4790400,0x100,0x0,0x490000,0x10000000,0x490000,0x410000,0x10000000,0x410000,0x0,0x10000000,0x0,0x4000000,0x100,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x10000000,0x10000,0x0,0x0,0x0,0x0,0x0,0x4210000,0x210000,0x0,0x20,0x0,0x10000000,0x10000000,0x10000000,0x4210000,0x210000,0x10000000,0x0,0x4000001,0x10000000,0x10000000,0x0,0x0,0x0,0x210000,0x0,0x20,0x0,0x0,0x0,0x1000000,0x0,0x1000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x10000,0x0,0x0,0x4790400,0x4790400,0x10000,0x4580400,0x210000,0x210000,0x800000,0x1000000,0x0,0x0,0x800000,0x0,0x10000000,0x0,0x0,0x10400,0x0,0x0,0x20000000,0x20000000,0x210006,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x210010,0x210010,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x10000000,0x800000,0x490000,0x4000000,0x10000000,0x4690000,0x210000,0x4480000,0x0,0x10000,0x0,0x210000,0x0,0x4000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x10000000,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x1000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4580400,0x210000,0x10,0x10,0x0,0x4000000,0x4000000,0x4000000,0x4000000,0x10000,0x0,0x0,0x0,0x4000000,0x10000000,0x0,0x800000,0x800000,0x10000,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c00,0x0,0x3c00,0x0,0x0,0x0,0x0,0x0,0x0,0x38,0x38,0xc0,0xc0,0x100,0x18,0x18,0x18,0x0,0x0,0x0,0x0,0x0,0xc00,0x1000,0x2000,0x0,0x4000,0x0,0x18,0x18,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c00,0x0,0x3c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38,0x38,0xc0,0xc0,0x100,0x18,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x400,0x4000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[60];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PlSql(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PlSql(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PlSqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 241; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 241; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PlSql(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PlSqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 241; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 241; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PlSql(PlSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 241; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PlSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 241; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[177];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 241; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 177; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 60; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
